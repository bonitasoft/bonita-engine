/**
 * Copyright (C) 2019 Bonitasoft S.A.
 * Bonitasoft, 32 rue Gustave Eiffel - 38000 Grenoble
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation
 * version 2.1 of the License.
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License along with this
 * program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth
 * Floor, Boston, MA 02110-1301, USA.
 **/
package org.bonitasoft.engine.business.application.xml;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link ApplicationMenuNode} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ApplicationMenuNodeAssert extends AbstractAssert<ApplicationMenuNodeAssert, ApplicationMenuNode> {

    /**
     * Creates a new <code>{@link ApplicationMenuNodeAssert}</code> to make assertions on actual ApplicationMenuNode.
     *
     * @param actual the ApplicationMenuNode we want to make assertions on.
     */
    public ApplicationMenuNodeAssert(ApplicationMenuNode actual) {
        super(actual, ApplicationMenuNodeAssert.class);
    }

    /**
     * An entry point for ApplicationMenuNodeAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
     * With a static import, one can write directly: <code>assertThat(myApplicationMenuNode)</code> and get specific
     * assertion with code completion.
     *
     * @param actual the ApplicationMenuNode we want to make assertions on.
     * @return a new <code>{@link ApplicationMenuNodeAssert}</code>
     */
    public static ApplicationMenuNodeAssert assertThat(ApplicationMenuNode actual) {
        return new ApplicationMenuNodeAssert(actual);
    }

    /**
     * Verifies that the actual ApplicationMenuNode's applicationMenus contains the given ApplicationMenuNode elements.
     *
     * @param applicationMenus the given elements that should be contained in actual ApplicationMenuNode's
     *        applicationMenus.
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationMenuNode's applicationMenus does not contain all given
     *         ApplicationMenuNode elements.
     */
    public ApplicationMenuNodeAssert hasApplicationMenus(ApplicationMenuNode... applicationMenus) {
        // check that actual ApplicationMenuNode we want to make assertions on is not null.
        isNotNull();

        // check that given ApplicationMenuNode varargs is not null.
        if (applicationMenus == null)
            throw new AssertionError("Expecting applicationMenus parameter not to be null.");

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getApplicationMenus(), applicationMenus);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationMenuNode has no applicationMenus.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationMenuNode's applicationMenus is not empty.
     */
    public ApplicationMenuNodeAssert hasNoApplicationMenus() {
        // check that actual ApplicationMenuNode we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have applicationMenus but had :\n  <%s>";

        // check
        if (actual.getApplicationMenus().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getApplicationMenus());
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationMenuNode's applicationPage is equal to the given one.
     *
     * @param applicationPage the given applicationPage to compare the actual ApplicationMenuNode's applicationPage to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ApplicationMenuNode's applicationPage is not equal to the given one.
     */
    public ApplicationMenuNodeAssert hasApplicationPage(String applicationPage) {
        // check that actual ApplicationMenuNode we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected applicationPage of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualApplicationPage = actual.getApplicationPage();
        if (!Objects.areEqual(actualApplicationPage, applicationPage)) {
            failWithMessage(assertjErrorMessage, actual, applicationPage, actualApplicationPage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationMenuNode's displayName is equal to the given one.
     *
     * @param displayName the given displayName to compare the actual ApplicationMenuNode's displayName to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ApplicationMenuNode's displayName is not equal to the given one.
     */
    public ApplicationMenuNodeAssert hasDisplayName(String displayName) {
        // check that actual ApplicationMenuNode we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected displayName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDisplayName = actual.getDisplayName();
        if (!Objects.areEqual(actualDisplayName, displayName)) {
            failWithMessage(assertjErrorMessage, actual, displayName, actualDisplayName);
        }

        // return the current assertion for method chaining
        return this;
    }

}
