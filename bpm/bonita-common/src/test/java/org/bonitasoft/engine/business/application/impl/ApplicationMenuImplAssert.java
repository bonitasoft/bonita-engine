/**
 * Copyright (C) 2019 Bonitasoft S.A.
 * Bonitasoft, 32 rue Gustave Eiffel - 38000 Grenoble
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation
 * version 2.1 of the License.
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License along with this
 * program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth
 * Floor, Boston, MA 02110-1301, USA.
 **/
package org.bonitasoft.engine.business.application.impl;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link ApplicationMenuImpl} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ApplicationMenuImplAssert extends AbstractAssert<ApplicationMenuImplAssert, ApplicationMenuImpl> {

    /**
     * Creates a new <code>{@link ApplicationMenuImplAssert}</code> to make assertions on actual ApplicationMenuImpl.
     *
     * @param actual the ApplicationMenuImpl we want to make assertions on.
     */
    public ApplicationMenuImplAssert(ApplicationMenuImpl actual) {
        super(actual, ApplicationMenuImplAssert.class);
    }

    /**
     * An entry point for ApplicationMenuImplAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
     * With a static import, one can write directly: <code>assertThat(myApplicationMenuImpl)</code> and get specific
     * assertion with code completion.
     *
     * @param actual the ApplicationMenuImpl we want to make assertions on.
     * @return a new <code>{@link ApplicationMenuImplAssert}</code>
     */
    public static ApplicationMenuImplAssert assertThat(ApplicationMenuImpl actual) {
        return new ApplicationMenuImplAssert(actual);
    }

    /**
     * Verifies that the actual ApplicationMenuImpl's applicationId is equal to the given one.
     *
     * @param applicationId the given applicationId to compare the actual ApplicationMenuImpl's applicationId to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ApplicationMenuImpl's applicationId is not equal to the given one.
     */
    public ApplicationMenuImplAssert hasApplicationId(long applicationId) {
        // check that actual ApplicationMenuImpl we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected applicationId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        long actualApplicationId = actual.getApplicationId();
        if (actualApplicationId != applicationId) {
            failWithMessage(assertjErrorMessage, actual, applicationId, actualApplicationId);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationMenuImpl's applicationPageId is equal to the given one.
     *
     * @param applicationPageId the given applicationPageId to compare the actual ApplicationMenuImpl's
     *        applicationPageId to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ApplicationMenuImpl's applicationPageId is not equal to the given one.
     */
    public ApplicationMenuImplAssert hasApplicationPageId(Long applicationPageId) {
        // check that actual ApplicationMenuImpl we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected applicationPageId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Long actualApplicationPageId = actual.getApplicationPageId();
        if (!Objects.areEqual(actualApplicationPageId, applicationPageId)) {
            failWithMessage(assertjErrorMessage, actual, applicationPageId, actualApplicationPageId);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationMenuImpl's displayName is equal to the given one.
     *
     * @param displayName the given displayName to compare the actual ApplicationMenuImpl's displayName to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ApplicationMenuImpl's displayName is not equal to the given one.
     */
    public ApplicationMenuImplAssert hasDisplayName(String displayName) {
        // check that actual ApplicationMenuImpl we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected displayName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDisplayName = actual.getDisplayName();
        if (!Objects.areEqual(actualDisplayName, displayName)) {
            failWithMessage(assertjErrorMessage, actual, displayName, actualDisplayName);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationMenuImpl's id is equal to the given one.
     *
     * @param id the given id to compare the actual ApplicationMenuImpl's id to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ApplicationMenuImpl's id is not equal to the given one.
     */
    public ApplicationMenuImplAssert hasId(long id) {
        // check that actual ApplicationMenuImpl we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        long actualId = actual.getId();
        if (actualId != id) {
            failWithMessage(assertjErrorMessage, actual, id, actualId);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationMenuImpl's index is equal to the given one.
     *
     * @param index the given index to compare the actual ApplicationMenuImpl's index to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ApplicationMenuImpl's index is not equal to the given one.
     */
    public ApplicationMenuImplAssert hasIndex(int index) {
        // check that actual ApplicationMenuImpl we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected index of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualIndex = actual.getIndex();
        if (actualIndex != index) {
            failWithMessage(assertjErrorMessage, actual, index, actualIndex);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationMenuImpl's parentId is equal to the given one.
     *
     * @param parentId the given parentId to compare the actual ApplicationMenuImpl's parentId to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ApplicationMenuImpl's parentId is not equal to the given one.
     */
    public ApplicationMenuImplAssert hasParentId(Long parentId) {
        // check that actual ApplicationMenuImpl we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected parentId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Long actualParentId = actual.getParentId();
        if (!Objects.areEqual(actualParentId, parentId)) {
            failWithMessage(assertjErrorMessage, actual, parentId, actualParentId);
        }

        // return the current assertion for method chaining
        return this;
    }

}
