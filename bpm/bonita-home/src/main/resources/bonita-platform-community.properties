#Bonita platform core configuration

# Platform administrator
platformAdminUsername=platformAdmin
platformAdminPassword=platform

# this datasource name is used by the engine to get connected to the database
database.journal.datasource.name=${sysprop.bonita.database.journal.datasource.name:java:comp/env/bonitaDS}
database.sequence.manager.datasource.name=${sysprop.bonita.database.sequence.manager.datasource.name:java:comp/env/bonitaSequenceManagerDS}

# By default, get DB vendor type from JVM System Property. If not set, fallback on value after semi-colon (e.g. h2)
db.vendor=${sysprop.bonita.db.vendor:h2}

# Hibernate specific configurations
hibernate.journal.show_sql=false
hibernate.journal.format_sql=false
hibernate.journal.use_sql_comments=false
hibernate.transaction.jta_platform = ${sysprop.bonita.hibernate.transaction.jta_platform:org.bonitasoft.engine.persistence.JNDIBitronixJtaPlatform}

# Transaction Service properties
transaction.manager=${sysprop.bonita.transaction.manager:java:comp/UserTransaction}
userTransaction=${sysprop.bonita.userTransaction:java:comp/UserTransaction}

# If platform is not already created and initialized (The 'platform' table exists in the database) and
# platform.create is set to true, then the platform will be created. Ignored if platform is already created:
platform.create=true

# automatically start/stop cluster node at startup/shutdown (only useful in a clustered environment):
node.start=true
node.stop=true

# Synchro service
# Initial capacity of the waiters map
bonita.platform.synchro.initialcapacity=50

# Scheduler
# Number of threads in Quartz scheduler Thread Pool
bonita.platform.scheduler.quartz.threadpool.size=5
# Number of couples to retrieve per request to persistence service
bonita.platform.scheduler.batchsize=1000

# Lock Service
# Number of seconds to wait for a lock
bonita.platform.lock.memory.timeout=60
# Number of mutex objects to create to sharde the ids for locking (Memory implementation only)
bonita.platform.lock.memory.poolsize=100

# Default platform cache: used if not specific cache is defined
bonita.platform.cache.default.maxElementsInMemory=1000
bonita.platform.cache.default.inMemoryOnly=true
bonita.platform.cache.default.eternal=true
bonita.platform.cache.default.evictionPolicy=LRU
bonita.platform.cache.default.timeToLiveSeconds=3600
bonita.platform.cache.default.maxElementsOnDisk=20000
bonita.platform.cache.default.copyOnRead=false
bonita.platform.cache.default.copyOnWrite=false
bonita.platform.cache.default.readIntensive=false

# Synchro service cache configuration
bonita.platform.cache.synchro.maxElementsInMemory=10000
bonita.platform.cache.synchro.inMemoryOnly=true
bonita.platform.cache.synchro.eternal=false
bonita.platform.cache.synchro.evictionPolicy=LRU
bonita.platform.cache.synchro.timeToLiveSeconds=120
bonita.platform.cache.synchro.maxElementsOnDisk=20000
bonita.platform.cache.synchro.copyOnRead=false
bonita.platform.cache.synchro.copyOnWrite=false
bonita.platform.cache.synchro.readIntensive=false

# Platform service cache configuration
bonita.platform.cache.platform.maxElementsInMemory=100
bonita.platform.cache.platform.inMemoryOnly=true
bonita.platform.cache.platform.eternal=true
bonita.platform.cache.platform.evictionPolicy=LRU
bonita.platform.cache.platform.timeToLiveSeconds=3600
bonita.platform.cache.platform.maxElementsOnDisk=20000
bonita.platform.cache.platform.copyOnRead=false
bonita.platform.cache.platform.copyOnWrite=false
bonita.platform.cache.platform.readIntensive=false

# Sequence manager configuration
bonita.platform.sequence.retries=9
bonita.platform.sequence.delay=10
bonita.platform.sequence.delayFactor=3
# if the sequence range size is not overrided, this value will be taken
bonita.platform.sequence.defaultRangeSize=100
# you can override the range size of any sequenceId following the pattern bonita.platform.sequence.<sequenceId>=<new range size>
# Most used objects: range size depends on process design
bonita.platform.sequence.70=2000
# Job description
bonita.platform.sequence.30=10000
# queriable log
bonita.platform.sequence.31=200000
# queriable log parameter
bonita.platform.sequence.10010=1000
# ProcessInstance
bonita.platform.sequence.10011=20000
# ActivityInstance<!-- 20 step by process average
bonita.platform.sequence.10013=20000
# TransitoinInstance<!-- same as activity instance
bonita.platform.sequence.10014=20000
# ConnectorInstance<!-- same as activity instance
bonita.platform.sequence.20010=3000
# archived ProcessInstance<!-- Process instance * nb state
bonita.platform.sequence.20011=80000
# EventTriggerInstance<!-- 1/5 of activity
bonita.platform.sequence.10016=4000
# WaitingEvent<!-- 1/5 of activity
bonita.platform.sequence.10017=4000
# MessageInstance<!-- 1/5 of activity
bonita.platform.sequence.10018=4000
# PendingActivityMapping<!-- 1/5 of activity
bonita.platform.sequence.10020=5000
# data
bonita.platform.sequence.20050=25000
# archived data<!-- 5 change by data
bonita.platform.sequence.10060=20000
# comment
bonita.platform.sequence.10080=20000


# Platform persistence service
bonita.platform.persistence.platform.likeEscapeCharacter=#
bonita.platform.persistence.platform.enableWordSearch=false

# Tenant persistence service
bonita.platform.persistence.tenant.likeEscapeCharacter=#
bonita.platform.persistence.tenant.enableWordSearch=false

# Persistence service hibernate configuration
bonita.platform.persistence.generate_statistics=false
bonita.platform.persistence.connection.shutdown=true
bonita.platform.persistence.validator.autoregister_listeners=false
bonita.platform.persistence.validator.apply_to_ddl=false
bonita.platform.persistence.javax.persistence.validation.mode=NONE

# quartz non managed connections transaction isolation level
# database default if false, read committed if true
org.quartz.jobStore.txIsolationLevelReadCommitted=false