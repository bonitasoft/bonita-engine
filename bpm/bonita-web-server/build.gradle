import org.apache.tools.ant.filters.ReplaceTokens

group = 'org.bonitasoft.console'
description = 'Bonita Web Server'

repositories {
    maven { url = uri('https://maven.restlet.talend.com') }
}

dependencies {
    implementation(project(":bpm:bonita-common"))
    implementation(project(":bpm:bonita-web-extensions"))
    implementation "commons-io:commons-io:${Deps.commonsIOVersion}"
    implementation "org.slf4j:slf4j-api:${Deps.slf4jVersion}"
    implementation "net.sf.ehcache:ehcache:${Deps.ehcacheVersion}"
    implementation "commons-fileupload:commons-fileupload:${Deps.commonsFileupload}"
    implementation "commons-beanutils:commons-beanutils:${Deps.commonsBeanutilsVersion}"
    implementation "org.apache.commons:commons-collections4:${Deps.commonsCollections4Version}"
    implementation "org.apache.commons:commons-lang3:${Deps.commonsLangVersion}"
    implementation "com.googlecode.json-simple:json-simple:${Deps.jsonSimpleVersion}"
    implementation "org.tuckey:urlrewritefilter:${Deps.urlrewriteVersion}"
    implementation "org.glassfish.web:jakarta.servlet.jsp.jstl:${Deps.jakartaJstlVersion}"
    implementation "jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:${Deps.jakartaJstlApiVersion}"
    implementation "org.restlet.jse:org.restlet:${Deps.restletVersion}"
    implementation("org.restlet.jee:org.restlet.ext.servlet:${Deps.restletVersion}") {
        exclude(group: "org.restlet.jee", module: "org.restlet")
    }
    implementation("org.restlet.jse:org.restlet.ext.jackson:${Deps.restletVersion}") {
        exclude(group: "org.codehaus.woodstox", module: "woodstox-core-asl")
        exclude(group: "org.codehaus.woodstox", module: "stax2-api")
    }
    implementation "com.fasterxml.woodstox:woodstox-core:${Deps.woodstoxCoreVersion}"
    implementation "org.codehaus.groovy:groovy:${Deps.groovyVersion}"
    implementation "org.apache.xbean:xbean-classloader:${Deps.xbeanClassloaderVersion}"
    implementation "org.springframework:spring-web:${Deps.springVersion}"
    implementation "org.springframework:spring-core:${Deps.springVersion}"
    implementation "org.fedorahosted.tennera:jgettext:${Deps.jgettextVersion}"
    implementation "com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:${Deps.owaspHTMLSanitizerVersion}"
    testImplementation(project(":bpm:bonita-server"))
    testImplementation "net.javacrumbs.json-unit:json-unit:${Deps.jsonUnitVersion}"
    testImplementation "org.assertj:assertj-core:${Deps.assertjVersion}"
    testImplementation "ch.qos.logback:logback-classic:${Deps.logbackVersion}"
    testImplementation "org.springframework:spring-test:${Deps.springVersion}"
    testImplementation "com.github.stefanbirkner:system-rules:${Deps.systemRulesVersion}"
    testImplementation "org.mockito:mockito-core:${Deps.mockitoVersion}"
    testImplementation "org.hamcrest:hamcrest:${Deps.hamcrestVersion}"
    testImplementation "junit:junit:${Deps.junit4Version}"
}

configurations {
    all {
        // Specify woodstox version to override the version pulled by jackson-dataformat-xml (transitive dep of restlet)
        resolutionStrategy.force "com.fasterxml.woodstox:woodstox-core:${Deps.woodstoxCoreVersion}"
        // Specify Guava version to override the version pulled by owasp-java-html-sanitizer
        resolutionStrategy.force "com.google.guava:guava:${Deps.guavaVersion}" //forcing managed version (transitive dependency of owasp-java-html-sanitizer)
    }
    tests
}

processResources {
    inputs.property("version", project.version)
    inputs.property("brandingVersion", brandingVersion)
    from('src/main/resources') {
        include '**/*'
        filter(ReplaceTokens, tokens: [projectVersion : project.version,
                                       brandingVersion: brandingVersion,
                                       buildYear      : String.valueOf(LocalDate.now().getYear())])
    }
}

tasks.register('buildZip', Zip) {
    from('src/main/resources') {
        include 'VERSION'
        filter(ReplaceTokens, tokens: [projectVersion : project.version,
                                       brandingVersion: brandingVersion,
                                       buildYear      : String.valueOf(LocalDate.now().getYear())])
    }
    from 'src/main/webapp'
}

tasks.named("build") {
    dependsOn tasks.named("buildZip")
}

tasks.named("test") {
    dependsOn tasks.named("testsJar")
}

tasks.register('testsJar', Jar) {
    dependsOn testClasses
    archiveClassifier = 'tests'
    from(sourceSets.test.output)
}

artifacts {
    tests testsJar
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
            artifact testsJar
            artifact buildZip
        }
    }
}
