configurations { schemagen }

dependencies {
    api("javax.xml.bind:jaxb-api:${Deps.jaxbVersion}") {
        exclude(group: "javax.activation") //replaced by jakarta
    }
    api "org.apache.commons:commons-lang3:${Deps.commonsLangVersion}"

    runtimeOnly "com.sun.activation:jakarta.activation:${Deps.activationVersion}"

    testImplementation "junit:junit:${Deps.junit4Version}"
    testImplementation "org.assertj:assertj-core:${Deps.assertjVersion}"

    schemagen(
            "com.sun.xml.bind:jaxb-xjc:${Deps.jaxbVersion}",
            "org.glassfish.jaxb:jaxb-runtime:${Deps.jaxbVersion}",
            "javax.xml.bind:jaxb-api:${Deps.jaxbVersion}",
            "org.glassfish.jaxb:jaxb-jxc:${Deps.jaxbVersion}",
            "com.sun.activation:jakarta.activation:${Deps.activationVersion}")
}

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom { pom ->
                name = 'Bonita Form Mapping Model'
                description = 'Contains the Bonita Form Mapping model and related builders'
                org.bonitasoft.engine.gradle.PomUtils.pomCommunityPublication(pom)
            }
        }
    }
}

def schemagen = tasks.register('schemagen') {
    def destDir = file("$buildDir/schemas")
    doLast {
        destDir.mkdirs()
        ant.taskdef(name: 'schemagen', classname: 'com.sun.tools.jxc.SchemaGenTask', classpath: configurations.schemagen.asPath)
        try {
            ant.schemagen(srcdir: new File('src/main/java/'), destdir: destDir, includeAntRuntime: false) {
                classpath { pathelement(path: configurations.schemagen.asPath) }
                include(name: 'org/bonitasoft/engine/bpm/bar/form/model/*.java')
                include(name: 'org/bonitasoft/engine/form/*.java')
            }
        } catch (Exception e) {
            def schema = file("$destDir/schema1.xsd")
            if (!schema.exists()) throw e
            schema.renameTo(file("$destDir/form-mapping.xsd"))
        }
    }
    inputs.dir('src/main/java/')
    outputs.file("$destDir/form-mapping.xsd")
    outputs.cacheIf { true }
}

tasks.named('processResources', ProcessResources.class).configure {
    from "$buildDir/schemas"
    dependsOn schemagen
}
