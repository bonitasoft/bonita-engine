/**
 * Copyright (C) 2019 Bonitasoft S.A.
 * Bonitasoft, 32 rue Gustave Eiffel - 38000 Grenoble
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation
 * version 2.1 of the License.
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License along with this
 * program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth
 * Floor, Boston, MA 02110-1301, USA.
 **/
package org.bonitasoft.engine.business.application.xml;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link ApplicationNode} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ApplicationNodeAssert extends AbstractAssert<ApplicationNodeAssert, ApplicationNode> {

    /**
     * Creates a new <code>{@link ApplicationNodeAssert}</code> to make assertions on actual ApplicationNode.
     *
     * @param actual the ApplicationNode we want to make assertions on.
     */
    public ApplicationNodeAssert(ApplicationNode actual) {
        super(actual, ApplicationNodeAssert.class);
    }

    /**
     * An entry point for ApplicationNodeAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
     * With a static import, one can write directly: <code>assertThat(myApplicationNode)</code> and get specific
     * assertion with code completion.
     *
     * @param actual the ApplicationNode we want to make assertions on.
     * @return a new <code>{@link ApplicationNodeAssert}</code>
     */
    public static ApplicationNodeAssert assertThat(ApplicationNode actual) {
        return new ApplicationNodeAssert(actual);
    }

    /**
     * Verifies that the actual ApplicationNode's applicationMenus contains the given ApplicationMenuNode elements.
     *
     * @param applicationMenus the given elements that should be contained in actual ApplicationNode's applicationMenus.
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNode's applicationMenus does not contain all given
     *         ApplicationMenuNode elements.
     */
    public ApplicationNodeAssert hasApplicationMenus(ApplicationMenuNode... applicationMenus) {
        // check that actual ApplicationNode we want to make assertions on is not null.
        isNotNull();

        // check that given ApplicationMenuNode varargs is not null.
        if (applicationMenus == null)
            throw new AssertionError("Expecting applicationMenus parameter not to be null.");

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getApplicationMenus(), applicationMenus);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNode has no applicationMenus.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNode's applicationMenus is not empty.
     */
    public ApplicationNodeAssert hasNoApplicationMenus() {
        // check that actual ApplicationNode we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have applicationMenus but had :\n  <%s>";

        // check
        if (actual.getApplicationMenus().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getApplicationMenus());
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNode's applicationPages contains the given ApplicationPageNode elements.
     *
     * @param applicationPages the given elements that should be contained in actual ApplicationNode's applicationPages.
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNode's applicationPages does not contain all given
     *         ApplicationPageNode elements.
     */
    public ApplicationNodeAssert hasApplicationPages(ApplicationPageNode... applicationPages) {
        // check that actual ApplicationNode we want to make assertions on is not null.
        isNotNull();

        // check that given ApplicationPageNode varargs is not null.
        if (applicationPages == null)
            throw new AssertionError("Expecting applicationPages parameter not to be null.");

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getApplicationPages(), applicationPages);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNode has no applicationPages.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNode's applicationPages is not empty.
     */
    public ApplicationNodeAssert hasNoApplicationPages() {
        // check that actual ApplicationNode we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have applicationPages but had :\n  <%s>";

        // check
        if (actual.getApplicationPages().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getApplicationPages());
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNode's description is equal to the given one.
     *
     * @param description the given description to compare the actual ApplicationNode's description to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ApplicationNode's description is not equal to the given one.
     */
    public ApplicationNodeAssert hasDescription(String description) {
        // check that actual ApplicationNode we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDescription = actual.getDescription();
        if (!Objects.areEqual(actualDescription, description)) {
            failWithMessage(assertjErrorMessage, actual, description, actualDescription);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNode's displayName is equal to the given one.
     *
     * @param displayName the given displayName to compare the actual ApplicationNode's displayName to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ApplicationNode's displayName is not equal to the given one.
     */
    public ApplicationNodeAssert hasDisplayName(String displayName) {
        // check that actual ApplicationNode we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected displayName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDisplayName = actual.getDisplayName();
        if (!Objects.areEqual(actualDisplayName, displayName)) {
            failWithMessage(assertjErrorMessage, actual, displayName, actualDisplayName);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNode's homePage is equal to the given one.
     *
     * @param homePage the given homePage to compare the actual ApplicationNode's homePage to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ApplicationNode's homePage is not equal to the given one.
     */
    public ApplicationNodeAssert hasHomePage(String homePage) {
        // check that actual ApplicationNode we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected homePage of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualHomePage = actual.getHomePage();
        if (!Objects.areEqual(actualHomePage, homePage)) {
            failWithMessage(assertjErrorMessage, actual, homePage, actualHomePage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNode's iconPath is equal to the given one.
     *
     * @param iconPath the given iconPath to compare the actual ApplicationNode's iconPath to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ApplicationNode's iconPath is not equal to the given one.
     */
    public ApplicationNodeAssert hasIconPath(String iconPath) {
        // check that actual ApplicationNode we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected iconPath of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualIconPath = actual.getIconPath();
        if (!Objects.areEqual(actualIconPath, iconPath)) {
            failWithMessage(assertjErrorMessage, actual, iconPath, actualIconPath);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNode's layout is equal to the given one.
     *
     * @param layout the given layout to compare the actual ApplicationNode's layout to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ApplicationNode's layout is not equal to the given one.
     */
    public ApplicationNodeAssert hasLayout(String layout) {
        // check that actual ApplicationNode we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected layout of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualLayout = actual.getLayout();
        if (!Objects.areEqual(actualLayout, layout)) {
            failWithMessage(assertjErrorMessage, actual, layout, actualLayout);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNode's profile is equal to the given one.
     *
     * @param profile the given profile to compare the actual ApplicationNode's profile to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ApplicationNode's profile is not equal to the given one.
     */
    public ApplicationNodeAssert hasProfile(String profile) {
        // check that actual ApplicationNode we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected profile of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualProfile = actual.getProfile();
        if (!Objects.areEqual(actualProfile, profile)) {
            failWithMessage(assertjErrorMessage, actual, profile, actualProfile);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNode's state is equal to the given one.
     *
     * @param state the given state to compare the actual ApplicationNode's state to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ApplicationNode's state is not equal to the given one.
     */
    public ApplicationNodeAssert hasState(String state) {
        // check that actual ApplicationNode we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected state of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualState = actual.getState();
        if (!Objects.areEqual(actualState, state)) {
            failWithMessage(assertjErrorMessage, actual, state, actualState);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNode's theme is equal to the given one.
     *
     * @param theme the given theme to compare the actual ApplicationNode's theme to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ApplicationNode's theme is not equal to the given one.
     */
    public ApplicationNodeAssert hasTheme(String theme) {
        // check that actual ApplicationNode we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected theme of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualTheme = actual.getTheme();
        if (!Objects.areEqual(actualTheme, theme)) {
            failWithMessage(assertjErrorMessage, actual, theme, actualTheme);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNode's token is equal to the given one.
     *
     * @param token the given token to compare the actual ApplicationNode's token to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ApplicationNode's token is not equal to the given one.
     */
    public ApplicationNodeAssert hasToken(String token) {
        // check that actual ApplicationNode we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected token of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualToken = actual.getToken();
        if (!Objects.areEqual(actualToken, token)) {
            failWithMessage(assertjErrorMessage, actual, token, actualToken);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNode's version is equal to the given one.
     *
     * @param version the given version to compare the actual ApplicationNode's version to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ApplicationNode's version is not equal to the given one.
     */
    public ApplicationNodeAssert hasVersion(String version) {
        // check that actual ApplicationNode we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected version of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualVersion = actual.getVersion();
        if (!Objects.areEqual(actualVersion, version)) {
            failWithMessage(assertjErrorMessage, actual, version, actualVersion);
        }

        // return the current assertion for method chaining
        return this;
    }

}
