configurations {
    schemagen
    tests
}

dependencies {
    api platform("org.bonitasoft.engine:bonita-artifacts-model-dependencies:${Deps.bonitaArtifactsModelVersion}")

    api("javax.xml.bind:jaxb-api") {
        exclude(group: "javax.activation") //replaced by jakarta
    }
    api("org.glassfish.jaxb:jaxb-runtime") {
        exclude(group: "javax.activation") //replaced by jakarta
    }
    api "org.slf4j:slf4j-api:${Deps.slf4jVersion}"

    runtimeOnly "com.sun.activation:jakarta.activation"

    testImplementation "junit:junit:${Deps.junit4Version}"
    testImplementation "org.assertj:assertj-core:${Deps.assertjVersion}"

    schemagen("org.glassfish.jaxb:jaxb-jxc:${Deps.jaxbJxcVersion}",
            "org.slf4j:slf4j-api:${Deps.slf4jVersion}")
}

tasks.register("sourcesJar", Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

tasks.register('testsJar', Jar) {
    from sourceSets.test.output
    archiveClassifier = 'tests'
}

tasks.register("javadocJar", Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

sourceSets {
    main {
        resources {
            srcDir project.file("build/generated/main/resources")
        }
    }
}

artifacts {
    tests testsJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact testsJar
            artifact javadocJar
            pom { pom ->
                name = 'Bonita Business Data Model'
                description = 'Contains the Bonita Business Data Model and related builders'
                org.bonitasoft.engine.gradle.PomUtils.pomCommunityPublication(pom)
            }
        }
    }
}

def generateInfoProperties = tasks.register("generateInfoProperties") {
    doFirst {
        project.file("build/generated/main/resources").mkdirs()
        project.file("build/generated/main/resources/info.properties").text = "version $project.version"
    }
    inputs.property "version", project.version
    outputs.file project.file("build/generated/main/resources/info.properties")
}

def schemagen = tasks.register('schemagen') {
    def destDir = file("$buildDir/schemas")
    doLast {
        destDir.mkdirs()
        ant.taskdef(name: 'schemagen', classname: 'com.sun.tools.jxc.SchemaGenTask', classpath: configurations.schemagen.asPath)
        try {
            ant.schemagen(srcdir: new File('src/main/java/'), destdir: destDir, includeAntRuntime: false) {
                schema(file: "bom.xsd", namespace: "http://documentation.bonitasoft.com/bdm-xml-schema/1.0")
                classpath { pathelement(path: configurations.schemagen.asPath) }
                include(name: 'org/bonitasoft/engine/bdm/model/**/*.java')
                exclude(name: 'org/bonitasoft/engine/bdm/model/QueryParameterTypes.java')
            }
        } catch (Exception e) {
            def schema = file("$destDir/bom.xsd")
            if (!schema.exists()) throw e
        }
    }
    inputs.dir('src/main/java/')
    outputs.file("$destDir/bom.xsd")
    outputs.cacheIf { true }
}

tasks.named('processResources', ProcessResources.class).configure {
    from "$buildDir/schemas"
    dependsOn(generateInfoProperties, schemagen)
}
