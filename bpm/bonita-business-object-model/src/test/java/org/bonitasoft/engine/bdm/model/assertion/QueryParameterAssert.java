/**
 * Copyright (C) 2019 Bonitasoft S.A.
 * Bonitasoft, 32 rue Gustave Eiffel - 38000 Grenoble
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation
 * version 2.1 of the License.
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License along with this
 * program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth
 * Floor, Boston, MA 02110-1301, USA.
 **/
package org.bonitasoft.engine.bdm.model.assertion;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;
import org.bonitasoft.engine.bdm.model.QueryParameter;

/**
 * {@link QueryParameter} specific assertions - Generated by CustomAssertionGenerator.
 */
public class QueryParameterAssert extends AbstractAssert<QueryParameterAssert, QueryParameter> {

    /**
     * Creates a new <code>{@link QueryParameterAssert}</code> to make assertions on actual QueryParameter.
     *
     * @param actual the QueryParameter we want to make assertions on.
     */
    public QueryParameterAssert(QueryParameter actual) {
        super(actual, QueryParameterAssert.class);
    }

    /**
     * An entry point for QueryParameterAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
     * With a static import, one can write directly: <code>assertThat(myQueryParameter)</code> and get specific
     * assertion with code completion.
     *
     * @param actual the QueryParameter we want to make assertions on.
     * @return a new <code>{@link QueryParameterAssert}</code>
     */
    public static QueryParameterAssert assertThat(QueryParameter actual) {
        return new QueryParameterAssert(actual);
    }

    /**
     * Verifies that the actual QueryParameter's className is equal to the given one.
     *
     * @param className the given className to compare the actual QueryParameter's className to.
     * @return this assertion object.
     * @throws AssertionError - if the actual QueryParameter's className is not equal to the given one.
     */
    public QueryParameterAssert hasClassName(String className) {
        // check that actual QueryParameter we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected className of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualClassName = actual.getClassName();
        if (!Objects.areEqual(actualClassName, className)) {
            failWithMessage(assertjErrorMessage, actual, className, actualClassName);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual QueryParameter's name is equal to the given one.
     *
     * @param name the given name to compare the actual QueryParameter's name to.
     * @return this assertion object.
     * @throws AssertionError - if the actual QueryParameter's name is not equal to the given one.
     */
    public QueryParameterAssert hasName(String name) {
        // check that actual QueryParameter we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualName = actual.getName();
        if (!Objects.areEqual(actualName, name)) {
            failWithMessage(assertjErrorMessage, actual, name, actualName);
        }

        // return the current assertion for method chaining
        return this;
    }

}
