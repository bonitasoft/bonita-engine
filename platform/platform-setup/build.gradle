import org.apache.tools.ant.filters.ReplaceTokens
import org.bonitasoft.engine.gradle.PomUtils
import org.gradle.internal.os.OperatingSystem

plugins {
    id 'distribution'
    id 'bonita-tests'
    id 'bonita-docker-database'
}

configurations {
    distributionZip
    inDistrib
}

dependencies {
    api project(':platform:platform-resources')
    api libs.commonsText
    api libs.slf4jApi
    api(libs.springBootStarter) {
        exclude(module: 'jul-to-slf4j')
        exclude(module: 'log4j-to-slf4j')
        exclude(module: 'snakeyaml')
    }
    api libs.springBootStarterJdbc
    api libs.h2
    api libs.postgresql
    api libs.commonsCLI

    annotationProcessor libs.lombok
    compileOnly libs.lombok

    runtimeOnly libs.logback

    testImplementation "org.assertj:assertj-core:${Deps.assertjVersion}"
    testImplementation "org.mockito:mockito-core:${Deps.mockitoVersion}"
    testImplementation "com.github.stefanbirkner:system-rules:${Deps.systemRulesVersion}"
    testImplementation(libs.springBootStarterTest) {
        exclude(module: 'json-path')
    }
    testImplementation "xmlunit:xmlunit:${Deps.xmlunitVersion}"
    testImplementation project(':platform:platform-setup-test')

    inDistrib project(path: ':platform:platform-resources', configuration: 'distributionZip')
}

group = 'org.bonitasoft.platform'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from project.components.java
            artifact distZip
            pom { pom ->
                name = "Bonita Platform Setup"
                description = "Bonita Platform Setup is the standalone tool to setup a new Bonita platform"
                PomUtils.pomCommunityPublication(pom)
            }
        }
    }
}

processResources {
    from('src/main/resources') {
        include '*'
        filter(ReplaceTokens, tokens: [version: project.version])
    }
}

distTar.enabled = false

distributions {
    main {
        distributionBaseName = "Bonita-platform-setup"
        contents {
            includeEmptyDirs = false
            into('/') {
                from('src/main/standalone')
                include('*.sh')
                include('*.bat')
                fileMode = 0740 // the first 0 is important
            }
            into('/') {
                from('src/main/standalone')
                exclude('*.sh')
                exclude('*.bat')
            }
            into('/lib') {
                from jar
                from project.configurations.runtimeClasspath {
                    exclude(module: 'jul-to-slf4j')
                    exclude(module: 'log4j-over-slf4j')
                    exclude(module: 'commons-logging')
                    exclude(module: 'log4j-api')
                    exclude(module: 'log4j-to-slf4j')
                    exclude(module: 'snakeyaml')
                }
            }
            configurations.inDistrib.resolvedConfiguration.resolvedArtifacts.each { artifact ->
                // Copy all sql files under the distrib zip folder /platform_conf/sql/
                from(zipTree(artifact.file)) {
                    include '**/sql/**'
                    eachFile { fcp ->
                        fcp.path = fcp.path.replaceAll(".*/sql/", "/platform_conf/sql/")
                    }
                }
                // Copy all files excepting sql and classes under the distrib zip folder /platform_conf/initial/
                from(zipTree(artifact.file)) {
                    exclude '**/sql/**'
                    exclude '**/*.class'
                    eachFile { fcp ->
                        fcp.path = fcp.path.replaceAll(".*${version}/", "/platform_conf/initial/")
                    }
                }
            }
            fileMode = 0640
        }
    }
}

tasks.distZip.dependsOn configurations.inDistrib

artifacts { distributionZip distZip }

databaseIntegrationTest {
    include '**/*IT.class'
    // No need to execute PlatformSetupDistributionIT on databases
    exclude '**/PlatformSetupDistributionIT.class'
}

tasks.matching { task -> task.name == "integrationTest" || task.name.endsWith("DatabaseTest") }
        .configureEach { task ->
            def testDir = new File(buildDir, task.name)
            doFirst {
                testDir.mkdirs()
                systemProperty "bonita.distribution.path", distZip.outputs.files.first()
            }
            workingDir testDir
            dependsOn distZip
        }


def setupE2e = tasks.register('setup-e2e', Exec) {
    commandLine 'sh', 'src/test/e2e/e2e-postgres-bos.sh'
    dependsOn distZip
    onlyIf { OperatingSystem.current().isLinux() }
}

integrationTest.configure {
    dependsOn setupE2e
}