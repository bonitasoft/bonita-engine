#####################
# Database properties
#####################

# others valid values are commented
db.vendor=h2
#db.vendor=postgres
#db.vendor=sqlserver
#db.vendor=oracle
#db.vendor=mysql

db.server.name=localhost

# when using h2, no port setting is needed since connexion is made using file protocol mode using relative directory.
#
# in case you move whole setup folder to another directory, you must change property below
# to point to original folder containing h2 database folder
# new value can be relative or absolute since it stills points to the right folder
h2.database.dir=../database

## postgres
#db.server.port=5432

## sqlserver
#db.server.port=1433

## oracle
#db.server.port=1521

## mysql
#db.server.port=3306

db.database.name=bonita_journal.db
db.user=sa
db.password=

# properties below don't need to be modified unless specific requirements

# h2 properties

h2.driverClassName=org.h2.Driver

# connecting to h2 via file instead of tcp protocol ensure that:
# 1) DB file will be created on demand
# 2) when h2 server started by web container (tomcat/jboss) is stopped, setup tool can still pull/push configuration
# for first run if no h2 tcp server is running
h2.url=jdbc:h2:file:${h2.database.dir}/${db.database.name};lock_mode=0;mvcc=true;db_close_on_exit=false;ignorecase=true;
# If using h2 in TCP mode (H2 server up and running in Bonita BPM Studio, for instance), use this URL:
#h2.url=jdbc:h2:tcp://${db.server.name}:${db.server.port}/${db.database.name};MVCC=TRUE;DB_CLOSE_ON_EXIT=FALSE;IGNORECASE=TRUE;

# postgres properties
postgres.driverClassName=org.postgresql.Driver
postgres.url=jdbc:postgresql://${db.server.name}:${db.server.port}/${db.database.name}

# mysql properties
mysql.driverClassName=com.mysql.jdbc.Driver
mysql.url=jdbc:mysql://${db.server.name}:${db.server.port}/${db.database.name}?useUnicode=true&characterEncoding=UTF-8

# sqlserver properties
sqlserver.url=jdbc:sqlserver://${db.server.name}:${db.server.port};database=${db.database.name}
sqlserver.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver

# oracle properties
oracle.driverClassName=oracle.jdbc.OracleDriver
oracle.url=jdbc:oracle:thin:@${db.server.name}:${db.server.port}:${db.database.name}

# spring properties
spring.datasource.username=${db.user}
spring.datasource.password=${db.password}
spring.datasource.driver-class-name=${${db.vendor}.driverClassName}
spring.datasource.url=${${db.vendor}.url}
