import org.bonitasoft.engine.gradle.PomUtils

//this module is published to be imported as dependency management
plugins {
    id "io.spring.dependency-management" version "1.1.0"
}
dependencyManagement {
    dependencies {
        imports {
            mavenBom libs.jacksonBom.get() as String
            mavenBom libs.groovyBom.get() as String
            mavenBom libs.bonitaArtifactsModelBom.get() as String
        }
        dependencySet(group: 'org.slf4j', version: libs.versions.slf4jVersion.get()) {
            entry 'slf4j-api'
            entry 'slf4j-jdk14'
        }
        dependency libs.h2.get() as String
        dependency libs.ehCache.get() as String

        dependencySet(group: 'org.springframework', version: libs.versions.springVersion.get()) {
            entry 'spring-context'
            entry 'spring-core'
            entry 'spring-web'
        }
        dependencySet(group: "org.springframework.boot", version: libs.versions.springBootVersion.get()) {
            entry "spring-boot-starter-jdbc"
            entry "spring-boot-autoconfigure"
        }
        dependency(libs.hibernateCore.get() as String) {
            exclude 'org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec'
        }
        dependency(libs.hibernateJCache.get() as String)
        dependency(libs.jcache.get() as String)
        dependency libs.javaxPersistenceApi.get() as String
        dependency libs.commonsIO.get() as String
        dependency libs.commonsFileUpload.get() as String
        dependency(libs.commonsBeanUtils.get() as String) {
            exclude 'commons-collections:commons-collections'
        }
        dependency(libs.commonsCLI.get() as String)
        dependency libs.commonsLang.get() as String
        dependency libs.commonsCollections.get() as String
        dependency libs.jakartaTransactionApi.get() as String
        dependency libs.javassist.get() as String
        dependencySet(group: 'org.apache.httpcomponents', version: libs.versions.httpComponentsVersion.get()) {
            entry 'httpclient'
            entry 'httpmime'
        }
        dependency libs.xstream.get() as String
        dependency libs.tomcatDbcp.get() as String
        dependency libs.narayanaJta.get() as String
        dependency libs.jakartaActivation.get() as String
        dependency libs.snakeyaml.get() as String
        dependency(libs.quartz.get() as String)
        dependency(libs.eclipseCompiler.get() as String)
        dependency(libs.javaxAnnotations.get() as String)
        dependencySet(group: "io.micrometer", version: libs.versions.micrometerVersion.get()) {
            entry "micrometer-core"
            entry "micrometer-registry-jmx"
            entry "micrometer-registry-prometheus"
        }
        dependencySet(group: 'com.hazelcast', version: libs.versions.hazelcastVersion.get()) {
            entry 'hazelcast'
            entry 'hazelcast-spring'
        }
        // declared here because it is used by web-extension and by distrib
        dependency(libs.jakartaServletApi.get() as String)
        // To be removed only when client projects (rest api extension) have all moved their deps to jakarta
        // Just keep a version managed to prevent client build breaks
        dependency(libs.javaxServletApi.get() as String)

        // Bonita engine dependencies:
        dependency "org.bonitasoft.engine:bonita-common:${project.version}"
        dependency "org.bonitasoft.engine:bonita-server:${project.version}"
        dependency "org.bonitasoft.engine:bonita-client:${project.version}"
        dependency "org.bonitasoft.engine:bonita-test-api:${project.version}"
        dependency "com.bonitasoft.engine:bonita-common-sp:${project.version}"
        dependency "com.bonitasoft.engine:bonita-server-sp:${project.version}"
        dependency "com.bonitasoft.engine:bonita-client-sp:${project.version}"

        // Web extensions dependencies:
        dependency "org.bonitasoft.console:bonita-web-server:${project.version}"
        dependency "org.bonitasoft.console:bonita-web-server-sp:${project.version}"
        dependency "org.bonitasoft.web:bonita-web-extensions:${project.version}"
        dependency "com.bonitasoft.web:bonita-web-extensions-sp:${project.version}"

        // Web layer specific dependencies:
        dependency(libs.xbeanClassloader.get() as String)
        dependency(libs.jakartaJstl.get() as String)
        dependency(libs.jakartaJstlApi.get() as String)
        dependency(libs.jgettext.get() as String)
        dependency(libs.urlrewritefilter.get() as String)
        dependency(libs.restlet.get() as String)
        dependency(libs.restletServlet.get() as String) {
            exclude "org.restlet.jee:org.restlet"
        }
        dependency(libs.restletJackson.get() as String) {
            exclude "org.codehaus.woodstox:woodstox-core-asl"
            exclude "org.codehaus.woodstox:stax2-api"
        }
        // Specify woodstox version to override the version pulled by jackson-dataformat-xml (transitive dep of restlet)
        dependency(libs.woodstoxCore.get() as String)
        dependency(libs.jsonSimple.get() as String)
        dependency(libs.keycloakSamlAdapterApiPublic.get() as String)
        dependency(libs.keycloakSamlServletFilterAdapter.get() as String) {
            exclude "org.bouncycastle:bcprov-jdk15on"
            exclude "org.bouncycastle:bcpkix-jdk15on"
            exclude "org.bouncycastle:bcutil-jdk15on"
            exclude "org.apache.santuario:xmlsec"
        }
        dependency(libs.keycloakAdapterCore.get() as String) {
            exclude "org.bouncycastle:bcprov-jdk15on"
        }
        dependency(libs.keycloakServletFilterAdapter.get() as String) {
            exclude "org.bouncycastle:bcprov-jdk15on"
        }
        dependency(libs.xmlsec.get() as String)
        dependency(libs.bouncyCastleBcprov.get() as String)
        dependency(libs.bouncyCastleBcpkix.get() as String)
        dependency(libs.bouncyCastleBcutil.get() as String)
        dependency(libs.spnego.get() as String)
    }
}
publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'bonita-engine'
            pom { pom ->
                name = "Bonita Engine"
                description = "Bonita Engine is a workflow engine which can be embedded inside your own applications"
                PomUtils.pomCommunityPublication(pom)
            }
        }
    }
}
